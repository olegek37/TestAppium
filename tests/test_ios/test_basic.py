import pytest
import requests
import random
from tests.common.helpers import *
from tests.common.locators import IOSLocators
from appium.webdriver.common.appiumby import AppiumBy
from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support.expected_conditions import visibility_of_element_located
import time
from selenium.webdriver.support import expected_conditions as EC
import os
from datetime import datetime
from selenium.common.exceptions import NoSuchElementException, ElementNotInteractableException
from appium import webdriver

from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.actions import interaction
from selenium.webdriver.common.actions.action_builder import ActionBuilder
from selenium.webdriver.common.actions.pointer_input import PointerInput






# –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞

# def test_home_content(driver):

#     # menu_items = ["–î–æ–º", "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ", "–û–ø–æ–≤–µ—â–µ–Ω–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
#     # for item in menu_items:
#     #     assert driver.find_element(AppiumBy.ACCESSIBILITY_ID, item).is_displayed()
    
#     # element = driver.find_elements(AppiumBy.CLASS_NAME, 'XCUIElementTypeLink')  –Ω–∞—Ö–æ–¥–∏—Ç 4 –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
#     # element = driver.find_elements(AppiumBy.CLASS_NAME, 'XCUIElementTypeOther')
#     # element = driver.find_elements(AppiumBy.CLASS_NAME, 'XCUIElementTypeOther')
#     # for i in range(len(element)):
#     #     print(f"Enabled: {element[i].get_attribute('enabled')}")
#     #     print(f"Visible: {element[i].get_attribute('visible')}") 
#     #     print(f"Name: {element[i].get_attribute('name')}")
#     #     print(f"Value: {element[i].get_attribute('value')}")
#     #     print ('------------------------------')
#     #     time.sleep(1)
#     # while True: 
#     #     for i in range(len(element)):
#     #         WebDriverWait(driver, 3).until(EC.element_to_be_clickable(element[i])).click()
#     #         time.sleep(2)
#     # while True:
#     #     path = "other"
#     #     os.makedirs(path, exist_ok=True)
#     #     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#     #     page_source = driver.page_source
#     #     filename = os.path.join(path, f"ps_{timestamp}.xml")
#     #     with open(filename, "w", encoding="utf-8") as file:
#     #         file.write(page_source)
#     #     print(page_source )
#     #     time.sleep(4)

#     assert True



# # –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞

# # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ –æ–±—â–∏–π —Ñ–∞–π–ª
#     path = "other"
#     os.makedirs(path, exist_ok=True)
#     common_file = os.path.join(path, "all_windows.xml")

#     # –•—Ä–∞–Ω–∏–º —Ö—ç—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
#     previous_hashes = set()

#     with open(common_file, "w", encoding="utf-8") as output_file:
#         output_file.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<all_windows>\n")
        
#         while True:
#             try:
#                 # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#                 page_source = driver.page_source
#                 current_hash = hash(page_source)
                
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∞–Ω–∞
#                 if current_hash not in previous_hashes:
#                     timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
#                     # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Ñ–∞–π–ª —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
#                     output_file.write(f"\n<window timestamp=\"{timestamp}\">\n")
#                     output_file.write(page_source)
#                     output_file.write("\n</window>\n")
#                     output_file.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                    
#                     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
#                     previous_hashes.add(current_hash)
#                     print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ: {timestamp}")
                
#                 time.sleep(4)
                
#             except KeyboardInterrupt:
#                 print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
#                 break

#         # –ó–∞–∫—Ä—ã–≤–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
#         output_file.write("</all_windows>")

#     print(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {common_file}")
#     assert True





# def test_find_clickable_elements(driver, sleep_time=3):
#     """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ"""
    
#     while True:
#         print("\n" + "="*50)
#         print("–ü–û–ò–°–ö –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í:")
#         print("="*50)
        
#         # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã iOS
#         classes = ['XCUIElementTypeButton', 'XCUIElementTypeLink', 
#                   'XCUIElementTypeCell', 'XCUIElementTypeStaticText', 
#                   'XCUIElementTypeOther']
        
#         for class_name in classes:
#             try:
#                 elements = driver.find_elements(AppiumBy.CLASS_NAME, class_name)
#                 for i, element in enumerate(elements):
#                     try:
#                         if (element.is_displayed() and 
#                             element.get_attribute('name') !='None' and
#                             element.get_attribute('enabled') == 'true' and
#                             element.size['width'] > 20 and 
#                             element.size['height'] > 20):
                            
#                             name = element.get_attribute('name')
#                             value = element.get_attribute('value')
                            
#                             print(f"\nüéØ {class_name}:")
#                             print(f"   Name: '{name}'")
#                             print(f"   Value: '{value}'")
#                             print(f"   Size: {element.size['width']}x{element.size['height']}")
#                             if name != 'N/A':
#                                 print(f"   –õ–æ–∫–∞—Ç–æ—Ä: driver.find_element(By.NAME, '{name}')")
                            
#                     except:
#                         continue
#             except:
#                 continue
        
#         print(f"\n‚è≥ –ñ–¥—É {sleep_time} —Å–µ–∫...")
#         time.sleep(sleep_time)



# def test_simple_find_and_click(driver, sleep_time=3):
#     """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è current_url"""
    
#     try:
#         # –ò—â–µ–º –ª—é–±—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
#         elements = driver.find_elements(AppiumBy.CLASS_NAME, 'XCUIElementTypeButton')
#         elements.extend(driver.find_elements(AppiumBy.CLASS_NAME, 'XCUIElementTypeLink'))
        
#         for element in elements:
#             try:
#                 if (element.is_displayed() and 
#                     element.get_attribute('enabled') == 'true' and
#                     element.get_attribute('name')):
                    
#                     name = element.get_attribute('name')
#                     print(f"üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞: {name}")
                    
#                     element.click()
#                     time.sleep(3)  # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞
                    
#                     print("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
#                     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
#                     try:
#                         driver.back()
#                         time.sleep(2)
#                         print("üîô –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
#                     except Exception as e:
#                         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
                    
#                     return True
                    
#             except Exception as e:
#                 continue
                
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
    
#     print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç")
#     return False


# def test_find_and_click_all_elements(driver, sleep_time=3):
#     """–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –í–°–ï–ú –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    
#     print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º...")
#     print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
#     cycle_count = 0
    
#     while True:
#         cycle_count += 1
#         print(f"\n" + "="*60)
#         print(f"üîç –¶–ò–ö–õ {cycle_count}: –ü–û–ò–°–ö –≠–õ–ï–ú–ï–ù–¢–û–í")
#         print("="*60)
        
#         # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
#         classes = ['XCUIElementTypeButton', 'XCUIElementTypeLink', 
#                   'XCUIElementTypeCell', 'XCUIElementTypeStaticText',
#                   'XCUIElementTypeOther']
        
#         found_elements = []
        
#         # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
#         for class_name in classes:
#             try:
#                 elements = driver.find_elements(AppiumBy.CLASS_NAME, class_name)
                
#                 for element in elements:
#                     try:
#                         if (element.is_displayed() and 
#                             element.get_attribute('enabled') == 'true' and
#                             element.get_attribute('name')):
                            
#                             name = element.get_attribute('name')
#                             value = element.get_attribute('value') or 'N/A'
#                             element_type = class_name.replace('XCUIElementType', '')
                            
#                             found_elements.append({
#                                 'element': element,
#                                 'name': name,
#                                 'value': value,
#                                 'type': element_type,
#                                 'class': class_name
#                             })
                            
#                     except Exception:
#                         continue
                        
#             except Exception:
#                 continue
        
#         # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
#         if found_elements:
#             print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
            
#             for i, item in enumerate(found_elements, 1):
#                 print(f"{i}. {item['type']}: '{item['name']}'")
            
#             print(f"\nüñ±Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏:")
            
#             # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å
#             for i, item in enumerate(found_elements, 1):
#                 try:
#                     print(f"\n{i}. –ö–ª–∏–∫–∞–µ–º –Ω–∞: '{item['name']}'")
#                     print(f"   –¢–∏–ø: {item['type']}")
#                     print(f"   Value: '{item['value']}'")
                    
#                     # –ì–û–¢–û–í–´–ï –õ–û–ö–ê–¢–û–†–´
#                     print(f"   üéØ –õ–û–ö–ê–¢–û–†–´:")
#                     print(f"      ‚Ä¢ By.NAME: driver.find_element(AppiumBy.NAME, '{item['name']}')")
#                     print(f"      ‚Ä¢ Accessibility ID: driver.find_element(AppiumBy.ACCESSIBILITY_ID, '{item['name']}')")
#                     print(f"      ‚Ä¢ XPATH: driver.find_element(AppiumBy.XPATH, \"//{item['class']}[@name='{item['name']}')")
                    
#                     # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å
#                     item['element'].click()
#                     print(f"   ‚úÖ –ö–õ–ò–ö –£–°–ü–ï–®–ï–ù!")
                    
#                     # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    
                    
#                     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
#                     print("   ‚è≥ –û–∂–∏–¥–∞—é —Ä—É—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞–∑–∞–¥...")
#                     print("   üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
#                     time.sleep(2)  # –î–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ä—É—á–Ω–æ–π –∫–ª–∏–∫
                    
#                 except Exception as e:
#                     print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
#                     continue
                    
#             print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(found_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
#         else:
#             print("‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
#         print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ {sleep_time} —Å–µ–∫...")
#         time.sleep(sleep_time)


def test_1(driver):
    # element = driver.find_element(*IOSLocators.CONNECTION_BUTTON)
    element = driver.find_element(*IOSLocators.HOME_BUTTON)
    element.click()
    # time.sleep(2)
    # element = driver.find_element(*IOSLocators.CONNECTION_BUTTON)
    # element.click()
    # driver.back()

    assert True , "–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Ç–µ—Å—Ç"


def test_app_launch_and_restart(driver):
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    driver.find_element(*IOSLocators.HOME_BUTTON).click()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
    assert "Setup" in driver.page_source
    
    # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    driver.background_app(-1)
    
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
    driver.launch_app()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    assert "Setup" in driver.page_source




def test_local_autorisation_right(driver):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –¥–µ–º–æ-—Å—Ç–µ–Ω–¥–µ —Å –≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # if not check_network_connection:
    #     pytest.skip("–ü—Ä–æ–ø—É—Å–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    try:
        favorites_button = driver.find_element(*IOSLocators.FAVORITES_BUTTON)
        favorites_button.click()
        settings_button = driver.find_element(*IOSLocators.SETTINGS_BUTTON)
        settings_button.click()
        connection_button = driver.find_element(*IOSLocators.CONNECTION_BUTTON)
        connection_button.click()
        time.sleep(1)
        key_field = driver.find_element(*IOSLocators.KEY_FILED)
        key_field.clear()
        key_field.send_keys("1234567890123456")
        connect_text = driver.find_element(*IOSLocators.CONNECT_TEXT)
        connect_text.click()
        time.sleep(2)
        home_button = driver.find_element(*IOSLocators.HOME_BUTTON)
        home_button.click()
        time.sleep(10)
        take_screenshot(driver,"local_stand_auto")
        # –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ - –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ "Setup" –≤ page_source
        assert "Setup" in driver.page_source, "–ù–µ –ø—Ä–æ—à–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –¥–µ–º–æ-—Å—Ç–µ–Ω–¥–µ"
    except Exception as e:
        take_screenshot(driver, "–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        pytest.fail(f"–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")


# def test_change_widget_image(driver):
   
#     try:
#         # 1. –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤–∏–¥–∂–µ—Ç
#         widget_element = driver.find_element(AppiumBy.ACCESSIBILITY_ID, "–ì–æ—Å—Ç–∏–Ω–∞—è")
#         action = webdriver.common.touch_action.TouchAction(driver)
#         action.long_press(widget_element, duration=2000).perform()
        
#         # 2. –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
#         time.sleep(2)  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —è–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        
#         # 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
#         containers = driver.find_elements(
#             AppiumBy.XPATH, 
#             "//XCUIElementTypeOther"
#         )
        
#         # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
#         selected_container = None
#         for container in containers:
#             try:
#                 # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
#                 container.find_element(AppiumBy.CLASS_NAME, "XCUIElementTypeImage")
#                 selected_container = container
#                 break
#             except:
#                 continue
        
#         # 5. –í—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç
#         target_container = None
#         for container in containers:
#             if container != selected_container:
#                 try:
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–∞–ª–æ—á–∫–∏
#                     container.find_element(AppiumBy.CLASS_NAME, "XCUIElementTypeImage")
#                 except:
#                     target_container = container
#                     break
        
#         # 6. –ö–ª–∏–∫–∞–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
#         if target_container:
#             target_container.click()
#             time.sleep(1)  # –∂–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–∞–ª–æ—á–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å
#             new_selected = driver.find_elements(
#                 AppiumBy.XPATH, 
#                 "//XCUIElementTypeOther[contains(.//XCUIElementTypeImage)]"
#             )
            
#             assert target_container in new_selected, "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞"
#         else:
#             assert False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞"
            
#     finally:
#         driver.quit()

#4 –î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–æ–Ω—ã - –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –º–µ–¥–∏–∞—Ç–µ–∫–∏
def test_zone_image_change(driver):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–æ–Ω—ã"""
    driver.find_element(*IOSLocators.HOME_BUTTON).click()


    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–æ–Ω—ã
    zone_card = driver.find_element(*IOSLocators.ZONE_LOCAL)
    
    # –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    actions = ActionChains(driver)
    actions.w3c_actions = ActionBuilder(driver, mouse=PointerInput(interaction.POINTER_TOUCH, "touch"))
    actions.w3c_actions.pointer_action.move_to_location(
        zone_card.location['x'] + zone_card.size['width'] / 2,
        zone_card.location['y'] + zone_card.size['height'] / 2
    )
    actions.w3c_actions.pointer_action.pointer_down()
    actions.w3c_actions.pointer_action.pause(2)
    actions.w3c_actions.pointer_action.pointer_up()
    actions.w3c_actions.perform()
    
    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –º–µ–¥–∏–∞—Ç–µ–∫–∏
    driver.find_element(*IOSLocators.PHONE_GALLERY).click()


    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images_layout = driver.find_element(*IOSLocators.PHONE_GALLERY_LAYOUT)
    print (images_layout)
    images = images_layout.find_elements(AppiumBy.CLASS_NAME,"XCUIElementTypeImage" )
    images[2].click()  # –í—ã–±–∏—Ä–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    assert WebDriverWait(driver, 5).until(
        EC.presence_of_element_located(IOSLocators.PHOTO_CH_NOTIFY)
    ).is_displayed()




#5 –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ - –≤–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤

def test_element_state_changes_after_click(driver):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –≤ UI.""" 
    target_element_id = "788:3"
    driver.find_element(*IOSLocators.MENU_LIGHTING).click()
    try:
        #  –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API---
        auth_token =  get_token()
        initial_state = get_element_state(auth_token,target_element_id )

        print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {target_element_id}: {initial_state}")
        
        #  –ö–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ –ª–∞–º–ø–∞---
        
        ui_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable(IOSLocators.LAMP_3))
        ui_element.click()
        print("–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        
        #–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
        time.sleep(1)  
        new_state = get_element_state(auth_token,target_element_id )
        print(f"–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {target_element_id}: {new_state}")

        driver.find_element(*IOSLocators.HOME_BUTTON).click()
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ---
        assert new_state != initial_state, (
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {target_element_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞. "
            f"–ë—ã–ª–æ: '{initial_state}', —Å—Ç–∞–ª–æ: '{new_state}'."
        )
        
            
    except Exception as e:
        pytest.fail(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

#6 –î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ - –æ—Ç–∫—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

def test_long_press_modal(driver):
    """–î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    driver.find_element(*IOSLocators.MENU_LIGHTING).click()

    element = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable(IOSLocators.LAMP_3))

    # –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    actions = ActionChains(driver)
    actions.w3c_actions.pointer_action.move_to_location(
    element.location['x'] + element.size['width'] / 2,
    element.location['y'] + element.size['height'] / 2
    )
    actions.w3c_actions.pointer_action.pointer_down()
    actions.w3c_actions.pointer_action.pause(2)
    actions.w3c_actions.pointer_action.pointer_up()
    actions.w3c_actions.perform()


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    elements_to_check = [
        '//XCUIElementTypeStaticText[@name="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]',
        '//XCUIElementTypeStaticText[@name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]',
        '//XCUIElementTypeStaticText[@name="–û–ø–æ–≤–µ—â–µ–Ω–∏—è"]'
    ]
    
    for xpath in elements_to_check:
        element = WebDriverWait(driver, 5).until(
            EC.visibility_of_element_located((AppiumBy.XPATH, xpath))
        )
        assert element.is_displayed()

def test_group_actions(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –í–∫–ª –≤—Å—ë/–í—ã–∫–ª –≤—Å—ë"""
    driver.find_element(*IOSLocators.MENU_LIGHTING).click()
    auth_token = get_token()
    
    # ID –≤—Å–µ—Ö –ª–∞–º–ø –æ—Ç 788:1 –¥–æ 788:8
    lamp_ids = [f"788:{i}" for i in range(1, 9)]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ª–∞–º–ø
    initial_states = {}
    for lamp_id in lamp_ids:
        initial_states[lamp_id] = get_element_state(auth_token, lamp_id)
    
    # –ö–ª–∏–∫–∞–µ–º "–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ"
    driver.find_element(*IOSLocators.ALL_ON).click()
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ª–∞–º–ø—ã –≤–∫–ª—é—á–∏–ª–∏—Å—å (—Å—Ç–∞—Ç—É—Å "01")
    for lamp_id in lamp_ids:
        new_state = get_element_state(auth_token, lamp_id)
        assert new_state == "01", f"–õ–∞–º–ø–∞ {lamp_id} –Ω–µ –≤–∫–ª—é—á–∏–ª–∞—Å—å. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}"
    
    # –ö–ª–∏–∫–∞–µ–º "–í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ" 
    driver.find_element(*IOSLocators.ALL_OFF).click()
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ª–∞–º–ø—ã –≤—ã–∫–ª—é—á–∏–ª–∏—Å—å (—Å—Ç–∞—Ç—É—Å "00")
    for lamp_id in lamp_ids:
        new_state = get_element_state(auth_token, lamp_id)
        assert new_state == "00", f"–õ–∞–º–ø–∞ {lamp_id} –Ω–µ –≤—ã–∫–ª—é—á–∏–ª–∞—Å—å. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}"
    
    driver.find_element(*IOSLocators.HOME_BUTTON).click()

def test_bottom_menu(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    for _ in range(10):
        # –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é
        for btn in [IOSLocators.HOME_BUTTON, IOSLocators.SETTINGS_BUTTON, 
                   IOSLocators.FAVORITES_BUTTON, IOSLocators.NOTICE_BUTTON]:
            driver.find_element(*btn).click()
            assert driver.page_source != ""  # –ù–µ –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
        assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in driver.page_source
        
        # –ü—É–Ω–∫—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for setting in [IOSLocators.COMMON_BUTTON, IOSLocators.CONNECTION_BUTTON,
                       IOSLocators.NOTIFY_BUTTON, IOSLocators.ABOUT_BUTTON]:
            driver.find_element(*setting).click()
            assert driver.page_source != ""  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
            assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in driver.page_source  # –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç
        driver.find_element(*IOSLocators.NOTICE_BUTTON).click()
        assert "–û–ø–æ–≤–µ—â–µ–Ω–∏—è" in driver.page_source
        driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
        assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in driver.page_source
        driver.find_element(*IOSLocators.HOME_BUTTON).click()
        assert "Setup" in driver.page_source

def test_categories_menu(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π """
    driver.find_element(*IOSLocators.HOME_BUTTON).click()
    assert driver.page_source != ""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat in [IOSLocators.MENU_SCENARIOS, IOSLocators.MENU_LIGHTING,
               IOSLocators.MENU_CURTAINS, IOSLocators.MENU_CLIMATE,
               IOSLocators.MENU_SECURITY]:
        driver.find_element(*cat).click()
        assert driver.page_source != ""
    
    # –°–≤–∞–π–ø –≤–ª–µ–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    elem = driver.find_element(*IOSLocators.MENU_SECURITY)
    driver.swipe(elem.location['x'] + 150, elem.location['y'] + 50, 
                elem.location['x'] - 150, elem.location['y'] + 50, 800)
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    for item in [IOSLocators.MENU_SENSORS, IOSLocators.MENU_OTHER, IOSLocators.MENU_MUSIC]:
        driver.find_element(*item).click()
        assert driver.page_source != ""

def test_dark_theme_short(driver):
    """–¢–µ–º–Ω–∞—è —Ç–µ–º–∞ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–±—â–∏–µ ‚Üí –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
    driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
    driver.find_element(*IOSLocators.COMMON_BUTTON).click()
    driver.find_element(*IOSLocators.THEME_NENU).click()
    driver.find_element(*IOSLocators.DARK_THEME).click()
    time.sleep(1)
    
    # –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    take_screenshot(driver, "dark_theme_settings")
    driver.find_element(*IOSLocators.NOTICE_BUTTON).click()
    take_screenshot(driver, "dark_theme_notice")
    driver.find_element(*IOSLocators.FAVORITES_BUTTON).click()
    take_screenshot(driver, "dark_theme_favorites")
    driver.find_element(*IOSLocators.HOME_BUTTON).click()
    take_screenshot(driver, "dark_theme_home")
    assert True 


def test_background_change(driver):
    """–°–º–µ–Ω–∞ —Ñ–æ–Ω–∞ + —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–±—â–∏–µ ‚Üí –§–æ–Ω
    driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
    driver.find_element(*IOSLocators.COMMON_BUTTON).click()
    driver.find_element(*IOSLocators.BACKGROUND_BUTTON).click()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    images = driver.find_elements(AppiumBy.CLASS_NAME, "XCUIElementTypeImage")
    if images:
        random.choice([img for img in images if img.is_displayed()]).click()
    
    # –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
    for btn in [IOSLocators.HOME_BUTTON, IOSLocators.SETTINGS_BUTTON,
               IOSLocators.FAVORITES_BUTTON, IOSLocators.NOTICE_BUTTON]:
        driver.find_element(*btn).click()
        time.sleep(1)
        take_screenshot(driver, f"bg_{btn[1].lower()}")
    assert True

def test_chaotic_user_behavior(driver):
    """–•–∞–æ—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    # –°–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    home_buttons = [
        IOSLocators.ZONE_LOCAL,
        IOSLocators.MENU_SCENARIOS,
        IOSLocators.MENU_LIGHTING,
        IOSLocators.MENU_CURTAINS,
        IOSLocators.MENU_CLIMATE,
        IOSLocators.MENU_SECURITY
    ]
    
    settings_buttons = [
        IOSLocators.COMMON_BUTTON,
        IOSLocators.CONNECTION_BUTTON,
        IOSLocators.NOTIFY_BUTTON,
        IOSLocators.ABOUT_BUTTON
    ]
    
    bottom_buttons = [
        IOSLocators.HOME_BUTTON,
        IOSLocators.SETTINGS_BUTTON,
        IOSLocators.FAVORITES_BUTTON,
        IOSLocators.NOTICE_BUTTON
    ]
    
    for i in range(10):
        # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        driver.find_element(*IOSLocators.HOME_BUTTON).click()
        time.sleep(0.5)
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action_type = random.choice(['home', 'settings', 'bottom'])
        
        if action_type == 'home':
            # –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
            random_button = random.choice(home_buttons)
            try:
                driver.find_element(*random_button).click()
                print(f"–ö–ª–∏–∫ –Ω–∞ {random_button[1]}")
                time.sleep(1)
                assert driver.page_source != "", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"
            except:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ {random_button[1]}")
        
        elif action_type == 'settings':
            # –î–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
            time.sleep(0.5)
            
            random_setting = random.choice(settings_buttons)
            try:
                driver.find_element(*random_setting).click()
                print(f"–ö–ª–∏–∫ –Ω–∞ {random_setting[1]}")
                time.sleep(1)
                assert driver.page_source != "", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"
            except:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ {random_setting[1]}")
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            driver.find_element(*IOSLocators.SETTINGS_BUTTON).click()
        
        else:
            # –ö–ª–∏–∫–∏ –ø–æ –Ω–∏–∂–Ω–∏–º –∫–Ω–æ–ø–∫–∞–º (—Ç–æ–ª—å–∫–æ HOME –∏ SETTINGS –∏–º–µ—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç)
            random_bottom = random.choice([IOSLocators.HOME_BUTTON, IOSLocators.SETTINGS_BUTTON])
            driver.find_element(*random_bottom).click()
            print(f"–ö–ª–∏–∫ –Ω–∞ {random_bottom[1]}")
            time.sleep(1)
            assert driver.page_source != "", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å–≤–∞–π–ø
        if random.choice([True, False]):
            width = driver.get_window_size()['width']
            height = driver.get_window_size()['height']
            direction = random.choice(['up', 'down', 'left', 'right'])
            
            if direction == 'up':
                driver.swipe(width/2, height*0.7, width/2, height*0.3, 300)
            elif direction == 'down':
                driver.swipe(width/2, height*0.3, width/2, height*0.7, 300)
            elif direction == 'left':
                driver.swipe(width*0.7, height/2, width*0.3, height/2, 300)
            else:
                driver.swipe(width*0.3, height/2, width*0.7, height/2, 300)
            
            print(f"–°–≤–∞–π–ø {direction}")
            time.sleep(0.5)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    driver.find_element(*IOSLocators.HOME_BUTTON).click()
    assert "Setup" in driver.page_source
    print("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
